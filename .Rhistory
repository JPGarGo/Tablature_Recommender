column(6, h3("You Might Like the Following Tablatures!"), tableOutput("table")),
img(src='guitar.jpg', align = "rigt")
)
)
server <- function(input, output){
output$table <- renderTable({
tab_recommendation(input_instrument = input$input_instrument,
input_difficulty = input$input_difficultyLevel,
input_genre = input$input_genre)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Music Professor Tablature Recommendation System"),
fluidRow(
column(4, h3("Select the tab characteristics:"),
wellPanel(
selectInput("input_instrument", "Instrument", Instrument),
selectInput("input_difficultyLevel", "Difficulty Level", DifficultyLevel),
selectInput("input_genre", "Genre", genres)
)
),
column(6, h3("You Might Like the Following Tablatures!"), tableOutput("table")),
img(src='guitar.png', align = "rigt")
)
)
server <- function(input, output){
output$table <- renderTable({
tab_recommendation(input_instrument = input$input_instrument,
input_difficulty = input$input_difficultyLevel,
input_genre = input$input_genre)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Music Professor Tablature Recommendation System"),
fluidRow(
column(4, h3("Select the tab characteristics:"),
wellPanel(
selectInput("input_instrument", "Instrument", Instrument),
selectInput("input_difficultyLevel", "Difficulty Level", DifficultyLevel),
selectInput("input_genre", "Genre", genres)
)
),
column(6, h3("You Might Like the Following Tablatures!"), tableOutput("table")),
img(src='guitar.png')
)
)
server <- function(input, output){
output$table <- renderTable({
tab_recommendation(input_instrument = input$input_instrument,
input_difficulty = input$input_difficultyLevel,
input_genre = input$input_genre)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Music Professor Tablature Recommendation System"),
fluidRow(
column(4, h3("Select the tab characteristics:"),
wellPanel(
selectInput("input_instrument", "Instrument", Instrument),
selectInput("input_difficultyLevel", "Difficulty Level", DifficultyLevel),
selectInput("input_genre", "Genre", genres)
)
),
column(6, h3("You Might Like the Following Tablatures!"), tableOutput("table")),
img(src='guitar.png', height = 68)
)
)
server <- function(input, output){
output$table <- renderTable({
tab_recommendation(input_instrument = input$input_instrument,
input_difficulty = input$input_difficultyLevel,
input_genre = input$input_genre)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Music Professor Tablature Recommendation System"),
fluidRow(
column(4, h3("Select the tab characteristics:"),
wellPanel(
selectInput("input_instrument", "Instrument", Instrument),
selectInput("input_difficultyLevel", "Difficulty Level", DifficultyLevel),
selectInput("input_genre", "Genre", genres)
)
),
column(6, h3("You Might Like the Following Tablatures!"), tableOutput("table")),
img(src='guitar.png', width = 68)
)
)
server <- function(input, output){
output$table <- renderTable({
tab_recommendation(input_instrument = input$input_instrument,
input_difficulty = input$input_difficultyLevel,
input_genre = input$input_genre)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Music Professor Tablature Recommendation System"),
fluidRow(
column(4, h3("Select the tab characteristics:"),
wellPanel(
selectInput("input_instrument", "Instrument", Instrument),
selectInput("input_difficultyLevel", "Difficulty Level", DifficultyLevel),
selectInput("input_genre", "Genre", genres)
)
),
column(6, h3("You Might Like the Following Tablatures!"), tableOutput("table")),
img(src='guitar.jpg', width = 68)
)
)
server <- function(input, output){
output$table <- renderTable({
tab_recommendation(input_instrument = input$input_instrument,
input_difficulty = input$input_difficultyLevel,
input_genre = input$input_genre)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Music Professor Tablature Recommendation System"),
fluidRow(
column(4, h3("Select the tab characteristics:"),
wellPanel(
selectInput("input_instrument", "Instrument", Instrument),
selectInput("input_difficultyLevel", "Difficulty Level", DifficultyLevel),
selectInput("input_genre", "Genre", genres)
)
),
column(6, h3("You Might Like the Following Tablatures!"), tableOutput("table")),
#img(src='guitar.jpg', width = 68)
)
)
server <- function(input, output){
output$table <- renderTable({
tab_recommendation(input_instrument = input$input_instrument,
input_difficulty = input$input_difficultyLevel,
input_genre = input$input_genre)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Music Professor Tablature Recommendation System"),
fluidRow(
column(4, h3("Select the tab characteristics:"),
wellPanel(
selectInput("input_instrument", "Instrument", Instrument),
selectInput("input_difficultyLevel", "Difficulty Level", DifficultyLevel),
selectInput("input_genre", "Genre", genres)
)
),
column(6, h3("You Might Like the Following Tablatures!"), tableOutput("table"))
#img(src='guitar.jpg', width = 68)
)
)
server <- function(input, output){
output$table <- renderTable({
tab_recommendation(input_instrument = input$input_instrument,
input_difficulty = input$input_difficultyLevel,
input_genre = input$input_genre)
})
}
# Run the application
shinyApp(ui = ui, server = server)
TablatureRatingMatrix
str(TablatureRatingMatrix)
Sys.time()
Sys.Date()
Sys.time()-10000
Sys.time()-10000-999999999
Sys.time()-10000-99999999
Sys.time()-10000-9000000
Sys.time()-1
Sys.time()-2
Sys.time()-4
Sys.time()-(365*24)
Sys.time()-(365*24*60)
Sys.time()-(365*24*60*60)
Sys.time()-(365*24*60*60)
Train_set <- TablatureRatingMatrix[1:600,]
Train_set_popular <- subset(RatingsMatrix$timestamp > Sys.time()-(365*24*60*60))
Train_set_popular <- subset(RatingsMatrix$timestamp > (Sys.time()-(365*24*60*60)))
Train_set_popular <- subset(RatingsMatrix, RatingsMatrix$timestamp > (Sys.time()-(365*24*60*60)))
View(Train_set_popular)
365*24*60*60
(2019-1970)*365*24*60*60
# Recommender Popular
Popular_rec <- Recommender(Train_set_popular, method="POPULAR")
Train_set_popularRS <- as(Train_set_popular,"realRatingMatrix")
Train_set <- TablatureRatingMatrix[1:600,]
Train_set_popular <- subset(RatingsMatrix, RatingsMatrix$timestamp > (Sys.time()-(365*24*60*60)))
Train_set_popularRS <- as(Train_set_popular,"realRatingMatrix")
# Recommender Popular
Popular_rec <- Recommender(Train_set_popularRS, method="POPULAR")
(2019-1970)*365*24*60*60
Sys.time()-(365*24*60*60)
genres <- c("Pop/Rock", "Blues/Jazz", "Reggae", "Metal")
DifficultyLevel <- c("Easy","Middle", "Hard")
Instrument <- c("Acoustic_Guitar", "Electric_Guitar", "Bass_Guitar")
Tonality <- c("DO+","DOm", "RE+", "REm", "MI+", "MIm", "FA+", "FAm", "SOL+", "SOLm", "LA+", "LAm", "SI+", "SIm" )
set.seed(123)
RatingsMatrix <- data.frame(
user=sample(nUsers, nRatings, replace=T),
tablatureID= paste("Tablature # ",sample(nTabs, nRatings, replace=T)),
rating=sample(5, nRatings, replace=T, prob = c(0.05, 0.15, 0.25, 0.45, 0.1 )),
timestamp = sample(1000000000:1545264000, nRatings, replace = T)
)
RatingsMatrix$user <- as.factor(RatingsMatrix$user)
RatingsMatrix$tablatureID <- as.factor(RatingsMatrix$tablatureID)
RatingsMatrix$rating <- as.numeric(RatingsMatrix$rating)
RatingsMatrix$timestamp <-as.numeric(RatingsMatrix$timestamp)
TablatureRatingMatrix <- as(RatingsMatrix, "realRatingMatrix")
# Creation of a Data Frame with the tab characteristics for posterior filtering in the recommender.
unique_tabs_ID <- unique(RatingsMatrix$tablatureID)
tabs_characteristics <- data.frame(tablatureID = unique_tabs_ID,
genre = sample(genres, length(unique_tabs_ID),replace = T),
difficulty = sample(DifficultyLevel, length(unique_tabs_ID), replace = T),
tonality = sample(Tonality, length(unique_tabs_ID), replace = T),
instrument = sample(Instrument, length(unique_tabs_ID), replace = T)
)
summary(tabs_characteristics)
head(tabs_characteristics)
Train_set <- TablatureRatingMatrix[1:600,]
Train_set_popular <- subset(RatingsMatrix, RatingsMatrix$timestamp > (Sys.time()-(365*24*60*60)))
View(Train_set_popular)
Train_set_popularRS <- as(Train_set_popular,"realRatingMatrix")
# Recommender Popular
Popular_rec <- Recommender(Train_set_popularRS, method="POPULAR")
# Recommender IBCF
IBCF_rec <- Recommender(Train_set, method = "IBCF", parameter = list(k=10, method = "Pearson"))
# Run the application
shinyApp(ui = ui, server = server)
View(Train_set_popular)
Train_set <- TablatureRatingMatrix[1:600,]
Train_set_popular <- subset(RatingsMatrix, RatingsMatrix$timestamp > (Sys.time()-(365*24*60*60)))
Train_set_popularRS <- as(Train_set_popular,"realRatingMatrix")
# Recommender Popular
Popular_rec <- Recommender(Train_set_popularRS, method="POPULAR")
# Recommender IBCF
IBCF_rec <- Recommender(Train_set, method = "IBCF", parameter = list(k=10, method = "Pearson"))
# Hybrid Recommender
Hybrid_rec <- HybridRecommender(Popular_rec, IBCF_rec, weights = c(0.3,0.7))
#Popular_predict <- predict(Popular_rec, newdata = TablatureRatingMatrix[601,], n=5)
#as(Popular_predict, "list")
Hybrid_predict <- predict(Hybrid_rec, newdata = TablatureRatingMatrix[601,], n=20)
Hybrid_predict <- predict(Hybrid_rec, newdata = TablatureRatingMatrix[601,], n=20)
Hybrid_predict <- predict(Hybrid_rec, newdata = TablatureRatingMatrix[601,], n=5)
Popular_predict <- predict(Popular_rec, newdata = TablatureRatingMatrix[601,], n=5)
TablatureRatingMatrix[601,]
# Recommender Popular
#Popular_rec <- Recommender(Train_set_popularRS, method="POPULAR")
Popular_rec <- Recommender(Train_set, method="POPULAR")
# Hybrid Recommender
Hybrid_rec <- HybridRecommender(Popular_rec, IBCF_rec, weights = c(0.3,0.7))
Popular_predict <- predict(Popular_rec, newdata = TablatureRatingMatrix[601,], n=5)
as(Popular_predict, "list")
Hybrid_predict <- predict(Hybrid_rec, newdata = TablatureRatingMatrix[601,], n=5)
as(Hybrid_predict, "list")
prediction_list_id <- as(Hybrid_predict, "list")
prediction_vector <- unlist(prediction_list_id)
tab_recommendation <- function(input_instrument, input_difficulty, input_genre){
#tabs_subset <- subset(tabs_characteristics,
#                     genre == input_genre &
#                      difficulty == input_difficulty &
#                     instrument == input_instrument)
#rating_matrix_subset <- subset(RatingsMatrix,
#                              RatingsMatrix$tablatureID %in% tabs_subset$tablatureID)
#Tab_rating_matrix <- as(rating_matrix_subset, "realRatingMatrix")
tabs_subset <- subset(tabs_characteristics,
genre == input_genre &
difficulty == input_difficulty &
instrument == input_instrument &
tabs_characteristics$tablatureID %in% prediction_vector)
return(head(tabs_subset, n=5))
}
if(!"shiny" %in% installed.packages()){install.packages("shiny")}
library(shiny)
if(! "proxy" %in% installed.packages()){install.packages("proxy")}
library(proxy)
if(!"recommenderlab" %in% installed.packages()){install.packages("recommenderlab")}
library(recommenderlab)
if(!"reshape" %in% installed.packages()){install.packages("reshape2")}
library(reshape2)
source("helpercode.R")
genres <- c("Pop/Rock", "Blues/Jazz", "Reggae", "Metal")
DifficultyLevel <- c("Easy","Middle", "Hard")
Instrument <- c("Acoustic_Guitar", "Electric_Guitar", "Bass_Guitar")
Tonality <- c("DO+","DOm", "RE+", "REm", "MI+", "MIm", "FA+", "FAm", "SOL+", "SOLm", "LA+", "LAm", "SI+", "SIm" )
ui <- fluidPage(
titlePanel("Music Professor Tablature Recommendation System"),
fluidRow(
column(4, h3("Select the tab characteristics:"),
wellPanel(
selectInput("input_instrument", "Instrument", Instrument),
selectInput("input_difficultyLevel", "Difficulty Level", DifficultyLevel),
selectInput("input_genre", "Genre", genres)
)
),
column(6, h3("You Might Like the Following Tablatures!"), tableOutput("table"))
#img(src='guitar.jpg', width = 68)
)
)
server <- function(input, output){
output$table <- renderTable({
tab_recommendation(input_instrument = input$input_instrument,
input_difficulty = input$input_difficultyLevel,
input_genre = input$input_genre)
})
}
# Run the application
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
if(!"Matrix"%in%installed.packages()){install.packages("Matrix")}
library("Matrix")
if(!"matrixStats"%in%installed.packages()){install.packages("matrixStats")}
library("matrixStats")
if(!"recommenderlab"%in%installed.packages()){install.packages("recommenderlab")}
library("recommenderlab")
#Creation of the Tablature rating matrix
nRatings <- 20000
nTabs <- 6000
nUsers <- 700
genres <- c("Pop/Rock", "Blues/Jazz", "Reggae", "Metal")
DifficultyLevel <- c("Easy","Middle", "Hard")
Instrument <- c("Acoustic_Guitar", "Electric_Guitar", "Bass_Guitar")
Tonality <- c("DO+","DOm", "RE+", "REm", "MI+", "MIm", "FA+", "FAm", "SOL+", "SOLm", "LA+", "LAm", "SI+", "SIm" )
set.seed(123)
RatingsMatrix <- data.frame(
user=sample(nUsers, nRatings, replace=T),
tablatureID= paste("Tablature # ",sample(nTabs, nRatings, replace=T)),
rating=sample(5, nRatings, replace=T, prob = c(0.05, 0.15, 0.25, 0.45, 0.1 )),
timestamp = sample(1000000000:1545264000, nRatings, replace = T)
)
RatingsMatrix$user <- as.factor(RatingsMatrix$user)
RatingsMatrix$tablatureID <- as.factor(RatingsMatrix$tablatureID)
RatingsMatrix$rating <- as.numeric(RatingsMatrix$rating)
RatingsMatrix$timestamp <-as.numeric(RatingsMatrix$timestamp)
TablatureRatingMatrix <- as(RatingsMatrix, "realRatingMatrix")
# Creation of a Data Frame with the tab characteristics for posterior filtering in the recommender.
unique_tabs_ID <- unique(RatingsMatrix$tablatureID)
tabs_characteristics <- data.frame(tablatureID = unique_tabs_ID,
genre = sample(genres, length(unique_tabs_ID),replace = T),
difficulty = sample(DifficultyLevel, length(unique_tabs_ID), replace = T),
tonality = sample(Tonality, length(unique_tabs_ID), replace = T),
instrument = sample(Instrument, length(unique_tabs_ID), replace = T)
)
summary(tabs_characteristics)
head(tabs_characteristics)
image(getRatingMatrix(TablatureRatingMatrix), main="Rating Matrix Heatmap", xlab = "Tablatures", ylab="Users")
library(shiny); runApp('Tab_Recommender_App.R')
knitr::opts_chunk$set(echo = TRUE)
if(!"Matrix"%in%installed.packages()){install.packages("Matrix")}
library("Matrix")
if(!"matrixStats"%in%installed.packages()){install.packages("matrixStats")}
library("matrixStats")
if(!"recommenderlab"%in%installed.packages()){install.packages("recommenderlab")}
library("recommenderlab")
#Creation of the Tablature rating matrix
nRatings <- 10000
nTabs <- 6000
nUsers <- 700
genres <- c("Pop/Rock", "Blues/Jazz", "Reggae", "Metal")
DifficultyLevel <- c("Easy","Middle", "Hard")
Instrument <- c("Acoustic_Guitar", "Electric_Guitar", "Bass_Guitar")
Tonality <- c("DO+","DOm", "RE+", "REm", "MI+", "MIm", "FA+", "FAm", "SOL+", "SOLm", "LA+", "LAm", "SI+", "SIm" )
set.seed(123)
RatingsMatrix <- data.frame(
user=sample(nUsers, nRatings, replace=T),
tablatureID= paste("Tablature # ",sample(nTabs, nRatings, replace=T)),
rating=sample(5, nRatings, replace=T, prob = c(0.05, 0.15, 0.25, 0.45, 0.1 )),
timestamp = sample(1000000000:1545264000, nRatings, replace = T)
)
RatingsMatrix$user <- as.factor(RatingsMatrix$user)
RatingsMatrix$tablatureID <- as.factor(RatingsMatrix$tablatureID)
RatingsMatrix$rating <- as.numeric(RatingsMatrix$rating)
RatingsMatrix$timestamp <-as.numeric(RatingsMatrix$timestamp)
TablatureRatingMatrix <- as(RatingsMatrix, "realRatingMatrix")
# Creation of a Data Frame with the tab characteristics for posterior filtering in the recommender.
unique_tabs_ID <- unique(RatingsMatrix$tablatureID)
tabs_characteristics <- data.frame(tablatureID = unique_tabs_ID,
genre = sample(genres, length(unique_tabs_ID),replace = T),
difficulty = sample(DifficultyLevel, length(unique_tabs_ID), replace = T),
tonality = sample(Tonality, length(unique_tabs_ID), replace = T),
instrument = sample(Instrument, length(unique_tabs_ID), replace = T)
)
summary(tabs_characteristics)
head(tabs_characteristics)
knitr::opts_chunk$set(echo = TRUE)
if(!"Matrix"%in%installed.packages()){install.packages("Matrix")}
library("Matrix")
if(!"matrixStats"%in%installed.packages()){install.packages("matrixStats")}
library("matrixStats")
if(!"recommenderlab"%in%installed.packages()){install.packages("recommenderlab")}
library("recommenderlab")
#Creation of the Tablature rating matrix
nRatings <- 10000
nTabs <- 6000
nUsers <- 700
genres <- c("Pop/Rock", "Blues/Jazz", "Reggae", "Metal")
DifficultyLevel <- c("Easy","Middle", "Hard")
Instrument <- c("Acoustic_Guitar", "Electric_Guitar", "Bass_Guitar")
Tonality <- c("DO+","DOm", "RE+", "REm", "MI+", "MIm", "FA+", "FAm", "SOL+", "SOLm", "LA+", "LAm", "SI+", "SIm" )
set.seed(123)
RatingsMatrix <- data.frame(
user=sample(nUsers, nRatings, replace=T),
tablatureID= paste("Tablature # ",sample(nTabs, nRatings, replace=T)),
rating=sample(5, nRatings, replace=T, prob = c(0.05, 0.15, 0.25, 0.45, 0.1 )),
timestamp = sample(1000000000:1545264000, nRatings, replace = T)
)
RatingsMatrix$user <- as.factor(RatingsMatrix$user)
RatingsMatrix$tablatureID <- as.factor(RatingsMatrix$tablatureID)
RatingsMatrix$rating <- as.numeric(RatingsMatrix$rating)
RatingsMatrix$timestamp <-as.numeric(RatingsMatrix$timestamp)
TablatureRatingMatrix <- as(RatingsMatrix, "realRatingMatrix")
# Creation of a Data Frame with the tab characteristics for posterior filtering in the recommender.
unique_tabs_ID <- unique(RatingsMatrix$tablatureID)
tabs_characteristics <- data.frame(tablatureID = unique_tabs_ID,
genre = sample(genres, length(unique_tabs_ID),replace = T),
difficulty = sample(DifficultyLevel, length(unique_tabs_ID), replace = T),
tonality = sample(Tonality, length(unique_tabs_ID), replace = T),
instrument = sample(Instrument, length(unique_tabs_ID), replace = T)
)
summary(tabs_characteristics)
head(tabs_characteristics)
# Average number of rated tabs per user
mean(rowCounts(TablatureRatingMatrix))
#Creation of the Tablature rating matrix
nRatings <- 10000
nTabs <- 6000
nUsers <- 700
genres <- c("Pop/Rock", "Blues/Jazz", "Reggae", "Metal")
DifficultyLevel <- c("Easy","Middle", "Hard")
Instrument <- c("Acoustic_Guitar", "Electric_Guitar", "Bass_Guitar")
Tonality <- c("DO+","DOm", "RE+", "REm", "MI+", "MIm", "FA+", "FAm", "SOL+", "SOLm", "LA+", "LAm", "SI+", "SIm" )
set.seed(123)
RatingsMatrix <- data.frame(
user=sample(nUsers, nRatings, replace=T),
tablatureID= paste("Tablature # ",sample(nTabs, nRatings, replace=T)),
rating=sample(5, nRatings, replace=T, prob = c(0.05, 0.15, 0.25, 0.45, 0.1 )),
timestamp = sample(1000000000:1545264000, nRatings, replace = T)
)
RatingsMatrix$user <- as.factor(RatingsMatrix$user)
RatingsMatrix$tablatureID <- as.factor(RatingsMatrix$tablatureID)
RatingsMatrix$rating <- as.numeric(RatingsMatrix$rating)
RatingsMatrix$timestamp <-as.numeric(RatingsMatrix$timestamp)
TablatureRatingMatrix <- as(RatingsMatrix, "realRatingMatrix")
# Creation of a Data Frame with the tab characteristics for posterior filtering in the recommender.
unique_tabs_ID <- unique(RatingsMatrix$tablatureID)
tabs_characteristics <- data.frame(tablatureID = unique_tabs_ID,
genre = sample(genres, length(unique_tabs_ID),replace = T),
difficulty = sample(DifficultyLevel, length(unique_tabs_ID), replace = T),
tonality = sample(Tonality, length(unique_tabs_ID), replace = T),
instrument = sample(Instrument, length(unique_tabs_ID), replace = T)
)
summary(tabs_characteristics)
head(tabs_characteristics)
# Average number of rated tabs per user
mean(rowCounts(TablatureRatingMatrix))
library("recommenderlab")
#Creation of the Tablature rating matrix
nRatings <- 10000
nTabs <- 6000
nUsers <- 700
genres <- c("Pop/Rock", "Blues/Jazz", "Reggae", "Metal")
DifficultyLevel <- c("Easy","Middle", "Hard")
Instrument <- c("Acoustic_Guitar", "Electric_Guitar", "Bass_Guitar")
Tonality <- c("DO+","DOm", "RE+", "REm", "MI+", "MIm", "FA+", "FAm", "SOL+", "SOLm", "LA+", "LAm", "SI+", "SIm" )
set.seed(123)
RatingsMatrix <- data.frame(
user=sample(nUsers, nRatings, replace=T),
tablatureID= paste("Tablature # ",sample(nTabs, nRatings, replace=T)),
rating=sample(5, nRatings, replace=T, prob = c(0.05, 0.15, 0.25, 0.45, 0.1 )),
timestamp = sample(1000000000:1545264000, nRatings, replace = T)
)
RatingsMatrix$user <- as.factor(RatingsMatrix$user)
RatingsMatrix$tablatureID <- as.factor(RatingsMatrix$tablatureID)
RatingsMatrix$rating <- as.numeric(RatingsMatrix$rating)
RatingsMatrix$timestamp <-as.numeric(RatingsMatrix$timestamp)
TablatureRatingMatrix <- as(RatingsMatrix, "realRatingMatrix")
# Creation of a Data Frame with the tab characteristics for posterior filtering in the recommender.
unique_tabs_ID <- unique(RatingsMatrix$tablatureID)
tabs_characteristics <- data.frame(tablatureID = unique_tabs_ID,
genre = sample(genres, length(unique_tabs_ID),replace = T),
difficulty = sample(DifficultyLevel, length(unique_tabs_ID), replace = T),
tonality = sample(Tonality, length(unique_tabs_ID), replace = T),
instrument = sample(Instrument, length(unique_tabs_ID), replace = T)
)
summary(tabs_characteristics)
head(tabs_characteristics)
# Average number of rated tabs per user
mean(rowCounts(TablatureRatingMatrix))
View(TablatureRatingMatrix)
rowCounts(TablatureRatingMatrix)
TablatureRatingMatrix@data@i
TablatureRatingMatrix
# Average number of rated tabs per user
mean(rowCounts(TablatureRatingMatrix))
TablatureRatingMatrix <- as(RatingsMatrix, "realRatingMatrix")
# Average number of rated tabs per user
mean(rowCounts(TablatureRatingMatrix))
# Average number of rated tabs per user
mean(rowCounts(TablatureRatingMatrix))
